doctype html
html
  head
    title= title
    link(rel='stylesheet', href='/stylesheets/style.css')
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.0/chartist.min.css')
    link(href="https://fonts.googleapis.com/css?family=Exo" rel="stylesheet")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.0/chartist.min.js")
  body
    block content
    script.
      let socket = io('https://survey-dashboards.azurewebsites.net');
      let totalNumberOfPeople = 0;

      let myChart = null;
      let labels = [];
      let series = [];
      let questionsPiecharts = {};

      const urlParams = new URLSearchParams(window.location.search);
      const myParam = urlParams.get('formName');

      fetch(`https://survey-hack9.azurewebsites.net/Survey?uid=${myParam}`).then((response) => {
        return response.json();
      }).then(response => {

        response.questions.forEach((q) => series.push(0));

        let labels = [];
        response.questions.forEach((q, index) => labels.push(`${index + 1}`));

        const questionsContainer = document.getElementsByClassName('questions-pies')[0];
        
        myChart = new Chartist.Line('.ct-chart', {
          labels: labels,
          series: [series],
        }, {
          fullWidth: true,
          height: 250,
        });

        response.questions.forEach((question, index) => {
          let questionElement = document.createElement('div');

          questionsContainer.insertAdjacentHTML("beforeend","<div class='questions-pies__pie pie-" + index + "'><div class='questions-pies__title'>" + question.question + "</div><div class='ct-pie ct-pie-" + index + "'></div></div>");
        
            let labelsPie = ["Scala", "falalla", "fa", "faafaafa"];

            let data = {
              series: [0, 0, 0, 0],
            };

            let sum = function(a, b) { return a + b };

            const pieChart = new Chartist.Pie(`.ct-pie-${index}`, data, {
              donut: true,
              donutWidth: 60,
              donutSolid: true,
              startAngle: 270,
              showLabel: true,
              labelInterpolationFnc: function(value, idx) {
                if (!value) {
                  return;
                }

                let percentage = Math.round(value / data.series.reduce(sum) * 100) + '%';
                return labelsPie[idx] + ' ' + percentage;
              }
            });  

            questionsPiecharts[index] = pieChart;
        });
      });

      socket.on('questionnaireStatus', (data) => {
        const newSeries = questionnaireStatus.map((question) => {
          if (!question.answers.length) {
            return 0;
          }

          const answeredTimes = question.answers.reduce((acc, answer) => acc + answer.count, 0);

          return answeredTimes;
        });

        series = newSeries;

        myChart.update({
          series: [newSeries],
        });

        questionnaireStatus.forEach((question, index) => {
          const questionContainer = document.getElementsByClassName(`pie-${index}`)[0];

          const questionChart = questionsPiecharts[index];

          let labelsPie = question.answers.map(answer => answer.answerTitle);

            let data = {
              series: question.answers.map(answer => answer.count),
            };

            let sum = function(a, b) { return a + b };

          questionChart.update(data, {
            labelInterpolationFnc: function(value, idx) {
                if (!value) {
                  return;
                }

                let percentage = Math.round(value / data.series.reduce(sum) * 100) + '%';
                return labelsPie[idx] + ' ' + percentage;
              }
          });
        });
      }); 

      socket.on('numberOfConnections', (data) => {
        let totalNumberContainer = document.getElementsByClassName('total-number')[0];

        totalNumberContainer.innerHTML = `${data}`;
      });